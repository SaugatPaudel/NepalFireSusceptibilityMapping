# ======================================================================================================================
#
#  Project:  GENERATING FIRE SUSCEPTIBILITY MAP FOR NEPAL
#  Purpose:  Given rainfall, temperature and humidity forecast, this will generate fire susceptibility map for nepal.
#  Author:   Saugat Paudel, saugat.email@gmail.com
#
# ======================================================================================================================


# ======================================================================================================================
#
# Usage:
#   1. Write this later.
#   2. ...
#
# Requirements: All required libraries were automatically generated by conda. Available at requirements.txt
#
# ======================================================================================================================


from pathlib import Path
import constants
from dataclasses import asdict
import functions
from osgeo import gdal
import numpy as np
from time import time
from datetime import timedelta

start_time = time()

gdal.UseExceptions()

gdal.SetConfigOption('GDAL_USE_CPL_MULTITHREAD', 'YES')
gdal.SetConfigOption('GDAL_NUM_THREADS', 'ALL_CPUS')

# ======================================================================================================================
# INSTANTIATE ALL DATACLASSES. CHANGE DEFAULT PATHS/VALUES/PARAMETERS IF NEEDED WHILE INSTANTIATING.
# ======================================================================================================================

FOLDER_PATHS = asdict(constants.FolderPaths())

RAW_VECTORS_FILEPATHS = asdict(constants.RawVectorsFilePaths())
RAW_RASTERS_FILEPATHS = asdict(constants.RawRastersFilePaths())
CLASSIFIED_RASTERS_FILEPATHS = asdict(constants.ClassifiedRastersFilePaths())

CLASSIFICATION_PARAMETERS = asdict(constants.ClassificationParameters())

FINAL_WEIGHTS = asdict(constants.FinalWeights())

RAW_CSV_FILEPATH = Path('Input/Raw/ecmwfgrid.csv')
BASE_FIREMAP_FILEPATH = Path('./Input/temp/fire_susceptibility_map_base.tif')
CLASSIFIED_BASEMAP_FILEPATH = Path('./Output/fire_susceptibility_map_cls.tif')

TEST_WGS84_PATH = Path('Input/Raw/dem_wgs84.tif')

# TODO: Keep this to 0 while testing. Setting it to 1 will recalculate all forecast rasters
FLAG_UPDATE_FORECAST_RASTERS = 0
# ======================================================================================================================


# ======================================================================================================================
# CHECK IF CLASSIFIED RASTERS EXIST FOR CONSTANT RASTERS. IF NOT, CREATE.
# ======================================================================================================================

for raster_type, raster_path in CLASSIFIED_RASTERS_FILEPATHS.items():
    if Path.exists(raster_path):
        print(f'Classified raster \'{raster_path.name}\' for \'{raster_type}\' already exists. Skipping.\n')
        pass
    else:
        functions.constants_raster_pipeline(
            input_raster_filepath=RAW_RASTERS_FILEPATHS[raster_type],
            output_raster_filepath=raster_path,
            input_shapefile_filepath=RAW_VECTORS_FILEPATHS['exact_boundary_utm45n'],
            classification_range=CLASSIFICATION_PARAMETERS[raster_type]
        )
# ======================================================================================================================


# ======================================================================================================================
# CHECK IF BASE FIRE SUSCEPTIBILITY MAP EXISTS. IF NOT, CREATE.
# ======================================================================================================================
if BASE_FIREMAP_FILEPATH.exists():
    print(f'Base map already exists. Skipping.\n')
    pass
else:
    summed_array = None
    geo_transform = None
    projection = None

    nodata = -128
    for raster_type, raster_path in CLASSIFIED_RASTERS_FILEPATHS.items():
        if summed_array is None:

            raster_ds = gdal.Open(raster_path)
            band_ds = raster_ds.GetRasterBand(1)
            raster_nodata = band_ds.GetNoDataValue()

            geo_transform = raster_ds.GetGeoTransform()
            projection = raster_ds.GetProjection()

            initial_array = band_ds.ReadAsArray()

            summed_array = np.full_like(initial_array, nodata, dtype=np.float32)

            valid_mask = initial_array != raster_nodata
            summed_array[valid_mask] = initial_array[valid_mask] * FINAL_WEIGHTS[raster_type]

            initial_array = None
            raster_ds = None
            band_ds = None

        else:
            raster_ds = gdal.Open(raster_path)
            band_ds = raster_ds.GetRasterBand(1)
            array_ds = band_ds.ReadAsArray()

            raster_nodata = band_ds.GetNoDataValue()

            valid_mask = array_ds != raster_nodata
            summed_array[valid_mask] += array_ds[valid_mask] * FINAL_WEIGHTS[raster_type]

            raster_ds = None
            band_ds = None
            array_ds = None

    driver = gdal.GetDriverByName('GTiff')
    output_ds = driver.Create(
        BASE_FIREMAP_FILEPATH,
        summed_array.shape[1],
        summed_array.shape[0],
        1,
        gdal.GDT_Float32)

    output_ds.SetGeoTransform(geo_transform)
    output_ds.SetProjection(projection)

    output_band = output_ds.GetRasterBand(1)
    output_band.SetNoDataValue(-128)
    output_band.WriteArray(summed_array)

    output_band.FlushCache()

    output_ds = None
    del output_ds
    output_band = None

    print(f'Base Fire Susceptibility Map successfully created. \n')
# ======================================================================================================================


# ======================================================================================================================
# CREATE FORECAST RASTERS
# ======================================================================================================================

list_of_forecast_csv_paths = functions.parse_raw_forecast_csv(
    raw_csv_filepath=RAW_CSV_FILEPATH,
    output_folder_path=FOLDER_PATHS['temporary']
)

forecast_raster_paths = {}
for counter, individual_path in enumerate(list_of_forecast_csv_paths):

    forecast_raster_paths[counter] = {}

    for parameter in ['ppt', 'tmax', 'rh']:

        output_filename = FOLDER_PATHS['output'] / f'{counter + 1}_day_{parameter}.tif'
        forecast_raster_paths[counter][parameter] = output_filename

        if output_filename.exists() and FLAG_UPDATE_FORECAST_RASTERS == 0:
            print(f'Forecast for {parameter} for day {counter + 1} already exists at {output_filename}. Skipping.')
            pass
        else:

            print(f'\nFor forecast day {counter + 1}, making \'{parameter}\' forecast raster ... ')

            first_step = functions.create_gridded_raster_from_csv(
                input_csv_filepath=individual_path,
                output_raster_filepath='/vsimem/first-step.tif',
                information_raster_filepath=TEST_WGS84_PATH,
                create_raster_from_field=parameter
                )

            second_step = functions.forecast_pipeline(
                input_raster_filepath=first_step,
                classification_range=CLASSIFICATION_PARAMETERS[parameter],
                input_shapefile_filepath=RAW_VECTORS_FILEPATHS['exact_boundary_utm45n'],
                output_raster_filepath=output_filename
            )

            gdal.Unlink(first_step)
# ======================================================================================================================


# ======================================================================================================================
# CREATE FINAL FIRE SUSCEPTIBILITY MAP
# ======================================================================================================================

# RAM usage is high from here. 5 datasets of are loaded into memory concurrently. If needed optimize.

base_ds = gdal.Open(BASE_FIREMAP_FILEPATH)
base_band_ds = base_ds.GetRasterBand(1)
base_array_ds = base_band_ds.ReadAsArray()

final_raster_geotransform = base_ds.GetGeoTransform()
final_raster_projection = base_ds.GetProjection()

print('\nCreating final fire susceptibility map ...')
for day, items in forecast_raster_paths.items():

    print(f'Making fire susceptibility rasters for forecast day {day + 1} ...')

    ppt_ds = gdal.Open(forecast_raster_paths[day]['ppt'])
    ppt_band_ds = ppt_ds.GetRasterBand(1)
    ppt_array_ds = ppt_band_ds.ReadAsArray()
    ppt_array_ds = ppt_array_ds.astype(np.float64)
    ppt_array_ds *= FINAL_WEIGHTS['ppt']
    ppt_array_ds[ppt_array_ds < 0] = -128
    del ppt_ds
    del ppt_band_ds

    temp_ds = gdal.Open(forecast_raster_paths[day]['tmax'])
    temp_band_ds = temp_ds.GetRasterBand(1)
    temp_array_ds = temp_band_ds.ReadAsArray()
    temp_array_ds = temp_array_ds.astype(np.float64)
    temp_array_ds *= FINAL_WEIGHTS['tmax']
    temp_array_ds[temp_array_ds < 0] = -128
    del temp_ds
    del temp_band_ds

    rh_ds = gdal.Open(forecast_raster_paths[day]['rh'])
    rh_band_ds = rh_ds.GetRasterBand(1)
    rh_array_ds = rh_band_ds.ReadAsArray()
    rh_array_ds = rh_array_ds.astype(np.float64)
    rh_array_ds *= FINAL_WEIGHTS['rh']
    rh_array_ds[rh_array_ds < 0] = -128
    del rh_ds
    del rh_band_ds

    # TODO: FOR TESTING PURPOSES RAINFALL DATA IS DISREGARDED. COMMENT/UNCOMMENT HERE TO USE RAINFALL DATA.
    # final_array = (base_array_ds + temp_array_ds + rh_array_ds) * ppt_array_ds
    final_array = base_array_ds + temp_array_ds + rh_array_ds

    final_array[final_array < 0] = -128

    final_output_filepath = f'{day + 1}_uncls_final.tif'

    final_driver = gdal.GetDriverByName('GTiff')
    final_output_ds = final_driver.Create(
        final_output_filepath,
        final_array.shape[1],
        final_array.shape[0],
        1,
        gdal.GDT_Float32)

    final_output_ds.SetGeoTransform(final_raster_geotransform)
    final_output_ds.SetProjection(final_raster_projection)

    final_output_band = final_output_ds.GetRasterBand(1)
    final_output_band.SetNoDataValue(-128)
    final_output_band.WriteArray(final_array)

    final_output_band.FlushCache()

    del final_array
    del final_output_ds
    del final_output_band

    print(f'... raster created. \n')

del base_ds
del base_band_ds
del base_array_ds
# ======================================================================================================================

end_time = time()
print(timedelta(seconds=end_time - start_time))
